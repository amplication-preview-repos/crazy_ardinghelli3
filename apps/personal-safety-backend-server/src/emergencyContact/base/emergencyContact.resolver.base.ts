/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmergencyContact } from "./EmergencyContact";
import { EmergencyContactCountArgs } from "./EmergencyContactCountArgs";
import { EmergencyContactFindManyArgs } from "./EmergencyContactFindManyArgs";
import { EmergencyContactFindUniqueArgs } from "./EmergencyContactFindUniqueArgs";
import { CreateEmergencyContactArgs } from "./CreateEmergencyContactArgs";
import { UpdateEmergencyContactArgs } from "./UpdateEmergencyContactArgs";
import { DeleteEmergencyContactArgs } from "./DeleteEmergencyContactArgs";
import { User } from "../../user/base/User";
import { EmergencyContactService } from "../emergencyContact.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmergencyContact)
export class EmergencyContactResolverBase {
  constructor(
    protected readonly service: EmergencyContactService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "read",
    possession: "any",
  })
  async _emergencyContactsMeta(
    @graphql.Args() args: EmergencyContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmergencyContact])
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "read",
    possession: "any",
  })
  async emergencyContacts(
    @graphql.Args() args: EmergencyContactFindManyArgs
  ): Promise<EmergencyContact[]> {
    return this.service.emergencyContacts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmergencyContact, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "read",
    possession: "own",
  })
  async emergencyContact(
    @graphql.Args() args: EmergencyContactFindUniqueArgs
  ): Promise<EmergencyContact | null> {
    const result = await this.service.emergencyContact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmergencyContact)
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "create",
    possession: "any",
  })
  async createEmergencyContact(
    @graphql.Args() args: CreateEmergencyContactArgs
  ): Promise<EmergencyContact> {
    return await this.service.createEmergencyContact({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmergencyContact)
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "update",
    possession: "any",
  })
  async updateEmergencyContact(
    @graphql.Args() args: UpdateEmergencyContactArgs
  ): Promise<EmergencyContact | null> {
    try {
      return await this.service.updateEmergencyContact({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmergencyContact)
  @nestAccessControl.UseRoles({
    resource: "EmergencyContact",
    action: "delete",
    possession: "any",
  })
  async deleteEmergencyContact(
    @graphql.Args() args: DeleteEmergencyContactArgs
  ): Promise<EmergencyContact | null> {
    try {
      return await this.service.deleteEmergencyContact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: EmergencyContact
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
