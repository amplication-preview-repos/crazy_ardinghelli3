/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmotionRecognition } from "./EmotionRecognition";
import { EmotionRecognitionCountArgs } from "./EmotionRecognitionCountArgs";
import { EmotionRecognitionFindManyArgs } from "./EmotionRecognitionFindManyArgs";
import { EmotionRecognitionFindUniqueArgs } from "./EmotionRecognitionFindUniqueArgs";
import { CreateEmotionRecognitionArgs } from "./CreateEmotionRecognitionArgs";
import { UpdateEmotionRecognitionArgs } from "./UpdateEmotionRecognitionArgs";
import { DeleteEmotionRecognitionArgs } from "./DeleteEmotionRecognitionArgs";
import { User } from "../../user/base/User";
import { EmotionRecognitionService } from "../emotionRecognition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmotionRecognition)
export class EmotionRecognitionResolverBase {
  constructor(
    protected readonly service: EmotionRecognitionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "read",
    possession: "any",
  })
  async _emotionRecognitionsMeta(
    @graphql.Args() args: EmotionRecognitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmotionRecognition])
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "read",
    possession: "any",
  })
  async emotionRecognitions(
    @graphql.Args() args: EmotionRecognitionFindManyArgs
  ): Promise<EmotionRecognition[]> {
    return this.service.emotionRecognitions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmotionRecognition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "read",
    possession: "own",
  })
  async emotionRecognition(
    @graphql.Args() args: EmotionRecognitionFindUniqueArgs
  ): Promise<EmotionRecognition | null> {
    const result = await this.service.emotionRecognition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmotionRecognition)
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "create",
    possession: "any",
  })
  async createEmotionRecognition(
    @graphql.Args() args: CreateEmotionRecognitionArgs
  ): Promise<EmotionRecognition> {
    return await this.service.createEmotionRecognition({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmotionRecognition)
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "update",
    possession: "any",
  })
  async updateEmotionRecognition(
    @graphql.Args() args: UpdateEmotionRecognitionArgs
  ): Promise<EmotionRecognition | null> {
    try {
      return await this.service.updateEmotionRecognition({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmotionRecognition)
  @nestAccessControl.UseRoles({
    resource: "EmotionRecognition",
    action: "delete",
    possession: "any",
  })
  async deleteEmotionRecognition(
    @graphql.Args() args: DeleteEmotionRecognitionArgs
  ): Promise<EmotionRecognition | null> {
    try {
      return await this.service.deleteEmotionRecognition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: EmotionRecognition
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
