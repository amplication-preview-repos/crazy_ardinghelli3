/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EmotionRecognition as PrismaEmotionRecognition,
  User as PrismaUser,
} from "@prisma/client";

export class EmotionRecognitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmotionRecognitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emotionRecognition.count(args);
  }

  async emotionRecognitions(
    args: Prisma.EmotionRecognitionFindManyArgs
  ): Promise<PrismaEmotionRecognition[]> {
    return this.prisma.emotionRecognition.findMany(args);
  }
  async emotionRecognition(
    args: Prisma.EmotionRecognitionFindUniqueArgs
  ): Promise<PrismaEmotionRecognition | null> {
    return this.prisma.emotionRecognition.findUnique(args);
  }
  async createEmotionRecognition(
    args: Prisma.EmotionRecognitionCreateArgs
  ): Promise<PrismaEmotionRecognition> {
    return this.prisma.emotionRecognition.create(args);
  }
  async updateEmotionRecognition(
    args: Prisma.EmotionRecognitionUpdateArgs
  ): Promise<PrismaEmotionRecognition> {
    return this.prisma.emotionRecognition.update(args);
  }
  async deleteEmotionRecognition(
    args: Prisma.EmotionRecognitionDeleteArgs
  ): Promise<PrismaEmotionRecognition> {
    return this.prisma.emotionRecognition.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.emotionRecognition
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
