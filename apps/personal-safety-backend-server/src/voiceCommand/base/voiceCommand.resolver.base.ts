/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VoiceCommand } from "./VoiceCommand";
import { VoiceCommandCountArgs } from "./VoiceCommandCountArgs";
import { VoiceCommandFindManyArgs } from "./VoiceCommandFindManyArgs";
import { VoiceCommandFindUniqueArgs } from "./VoiceCommandFindUniqueArgs";
import { CreateVoiceCommandArgs } from "./CreateVoiceCommandArgs";
import { UpdateVoiceCommandArgs } from "./UpdateVoiceCommandArgs";
import { DeleteVoiceCommandArgs } from "./DeleteVoiceCommandArgs";
import { User } from "../../user/base/User";
import { VoiceCommandService } from "../voiceCommand.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VoiceCommand)
export class VoiceCommandResolverBase {
  constructor(
    protected readonly service: VoiceCommandService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "read",
    possession: "any",
  })
  async _voiceCommandsMeta(
    @graphql.Args() args: VoiceCommandCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VoiceCommand])
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "read",
    possession: "any",
  })
  async voiceCommands(
    @graphql.Args() args: VoiceCommandFindManyArgs
  ): Promise<VoiceCommand[]> {
    return this.service.voiceCommands(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VoiceCommand, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "read",
    possession: "own",
  })
  async voiceCommand(
    @graphql.Args() args: VoiceCommandFindUniqueArgs
  ): Promise<VoiceCommand | null> {
    const result = await this.service.voiceCommand(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceCommand)
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "create",
    possession: "any",
  })
  async createVoiceCommand(
    @graphql.Args() args: CreateVoiceCommandArgs
  ): Promise<VoiceCommand> {
    return await this.service.createVoiceCommand({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceCommand)
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "update",
    possession: "any",
  })
  async updateVoiceCommand(
    @graphql.Args() args: UpdateVoiceCommandArgs
  ): Promise<VoiceCommand | null> {
    try {
      return await this.service.updateVoiceCommand({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoiceCommand)
  @nestAccessControl.UseRoles({
    resource: "VoiceCommand",
    action: "delete",
    possession: "any",
  })
  async deleteVoiceCommand(
    @graphql.Args() args: DeleteVoiceCommandArgs
  ): Promise<VoiceCommand | null> {
    try {
      return await this.service.deleteVoiceCommand(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: VoiceCommand): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
